# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_HWx5u1l-Wms1SrRDSQCKnXZ_-c2aKcW
"""

import pandas as pd
import numpy as np

train_ds = pd.read_csv("data/train.csv")
valid_ds = pd.read_csv("data/valid.csv")

l1 = 'label_1'
l2 = 'label_2'
l3 = 'label_3'
l4 = 'label_4'

features = [f'feature_{i}' for i in range(1, 257)]
labels = [l1, l2, l3, l4]

x_train = {}
x_valid = {}
y_train = {}
y_valid = {}

from sklearn.preprocessing import RobustScaler

for label in labels:
    tr_ds = train_ds[train_ds[l2].notna()] if label == l2 else train_ds
    vl_ds = valid_ds[valid_ds[l2].notna()] if label == l2 else valid_ds

    scaler = RobustScaler()
    x_train[label] = pd.DataFrame(scaler.fit_transform(tr_ds.drop(labels, axis=1)), columns=features)
    y_train[label] = tr_ds[label]

    x_valid[label] = pd.DataFrame(scaler.transform(vl_ds.drop(labels, axis=1)), columns=features)
    y_valid[label] = vl_ds[label]

train_ds[l3].value_counts()

"""######################################################     Label 01 [Before feature engineering]                ############################################################################################"""

from sklearn import svm

model = svm.SVC(kernel='linear')
model.fit(x_train[l1], y_train[l1])

from sklearn import metrics

y_pred = model.predict(x_valid[l1])

print(metrics.confusion_matrix(y_valid[l1], y_pred))
print(metrics.accuracy_score(y_valid[l1], y_pred))
print(metrics.precision_score(y_valid[l1], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l1], y_pred, average='weighted'))

"""Label 01 [Feauture Engineering]

----------------------------Using SelectKBest Univariate feature selection--------------------------------------
"""

from sklearn.feature_selection import SelectKBest, SelectPercentile, f_classif

selector = SelectKBest(f_classif, k=120)
x_train_new = selector.fit_transform(x_train[l1], y_train[l1])

x_train_new.shape

model = svm.SVC(kernel='linear')
model.fit(x_train_new, y_train[l1])

y_pred = model.predict(selector.transform(x_valid[l1]))

print(metrics.confusion_matrix(y_valid[l1], y_pred))
print(metrics.accuracy_score(y_valid[l1], y_pred))
print(metrics.precision_score(y_valid[l1], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l1], y_pred, average='weighted'))

"""-----------------------Using SelectPercentile feature selection--------------------------------"""

selector = SelectPercentile()
x_train_new = selector.fit_transform(x_train[l1], y_train[l1])

x_train_new.shape

model = svm.SVC(kernel='linear')
model.fit(x_train_new, y_train[l1])

y_pred = model.predict(selector.transform(x_valid[l1]))

print(metrics.confusion_matrix(y_valid[l1], y_pred))
print(metrics.accuracy_score(y_valid[l1], y_pred))
print(metrics.precision_score(y_valid[l1], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l1], y_pred, average='weighted'))

"""------------------------------------- Using Principal component analysis -------------------------------------------------"""

from sklearn.decomposition import PCA

selector = PCA(n_components=0.985, svd_solver='full')
x_train_new = pd.DataFrame(selector.fit_transform(x_train[l1]))

x_train_new.shape

model = svm.SVC(kernel='linear')
model.fit(x_train_new, y_train[l1])

x_valid_new = pd.DataFrame(selector.transform(x_valid[l1]))
y_pred = model.predict(x_valid_new)

print(metrics.confusion_matrix(y_valid[l1], y_pred))
print(metrics.accuracy_score(y_valid[l1], y_pred))
print(metrics.precision_score(y_valid[l1], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l1], y_pred, average='weighted'))

"""#################################################################         Label 02 [Before feature Engineering]             ############################################################################################"""

model = svm.SVC(kernel='linear')
model.fit(x_train[l2], y_train[l2])

y_pred = model.predict(x_valid[l2])

print(metrics.confusion_matrix(y_valid[l2], y_pred))
print(metrics.accuracy_score(y_valid[l2], y_pred))
print(metrics.precision_score(y_valid[l2], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l2], y_pred, average='weighted'))

"""------------------------------------------Feature engineering using PCA----------------------------------------------------"""

selector = PCA(n_components=0.985, svd_solver='full')
x_train_new = pd.DataFrame(selector.fit_transform(x_train[l2]))

x_train_new.shape

model = svm.SVC(kernel='linear')
model.fit(x_train_new, y_train[l2])

x_valid_new = pd.DataFrame(selector.transform(x_valid[l2]))
y_pred = model.predict(x_valid_new)

print(metrics.confusion_matrix(y_valid[l2], y_pred))
print(metrics.accuracy_score(y_valid[l2], y_pred))
print(metrics.precision_score(y_valid[l2], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l2], y_pred, average='weighted'))

"""#########################################################################        Label 03 [ before feature engineering] ####################################################################################"""

model = svm.SVC(kernel='linear')
model.fit(x_train[l3], y_train[l3])

y_pred = model.predict(x_valid[l3])

print(metrics.confusion_matrix(y_valid[l3], y_pred))
print(metrics.accuracy_score(y_valid[l3], y_pred))
print(metrics.precision_score(y_valid[l3], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l3], y_pred, average='weighted'))

"""---------------------------------Feature engineering using PCA----------------------------------------------"""

selector = PCA(n_components=0.985, svd_solver='full')
x_train_new = pd.DataFrame(selector.fit_transform(x_train[l3]))

x_train_new.shape

model = svm.SVC(kernel='linear')
model.fit(x_train_new, y_train[l3])

x_valid_new = pd.DataFrame(selector.transform(x_valid[l3]))
y_pred = model.predict(x_valid_new)

print(metrics.confusion_matrix(y_valid[l3], y_pred))
print(metrics.accuracy_score(y_valid[l3], y_pred))
print(metrics.precision_score(y_valid[l3], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l3], y_pred, average='weighted'))

"""#########################################################################        Label 04 [ before feature engineering] ####################################################################################"""

model = svm.SVC(kernel='linear', class_weight='balanced')
model.fit(x_train[l4], y_train[l4])

y_pred = model.predict(x_valid[l4])

print(metrics.accuracy_score(y_valid[l4], y_pred))

"""---------------------------------Feature engineering using PCA----------------------------------------------"""

selector = PCA(n_components=0.985, svd_solver='full')
x_train_new = pd.DataFrame(selector.fit_transform(x_train[l4]))

model = svm.SVC(kernel='linear', class_weight='balanced')
model.fit(x_train_new, y_train[l4])

x_valid_new = pd.DataFrame(selector.transform(x_valid[l4]))
y_pred = model.predict(x_valid_new)

print(metrics.confusion_matrix(y_valid[l4], y_pred))
print(metrics.accuracy_score(y_valid[l4], y_pred))
print(metrics.precision_score(y_valid[l4], y_pred, average='weighted'))
print(metrics.f1_score(y_valid[l4], y_pred, average='weighted'))